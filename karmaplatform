// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title KarmaPlatforms
 * @dev A simple system where platform owners can reward users with karma points.
 * Each platform must be registered by the main admin (owner).
 */
contract KarmaPlatforms {
    address public owner;

    struct Platform {
        string name;
        bool isRegistered;
    }

    mapping(address => Platform) public platforms;
    mapping(address => uint256) public karmaBalance;

    event PlatformRegistered(address indexed platformAddress, string name);
    event KarmaAwarded(address indexed fromPlatform, address indexed toUser, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this");
        _;
    }

    modifier onlyPlatform() {
        require(platforms[msg.sender].isRegistered, "Not a registered platform");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // Register a new platform
    function registerPlatform(address _platform, string memory _name) public onlyOwner {
        require(!platforms[_platform].isRegistered, "Already registered");
        platforms[_platform] = Platform({name: _name, isRegistered: true});
        emit PlatformRegistered(_platform, _name);
    }

    // Platforms can reward users with karma
    function awardKarma(address _user, uint256 _amount) public onlyPlatform {
        require(_user != address(0), "Invalid user address");
        require(_amount > 0, "Amount must be greater than zero");

        karmaBalance[_user] += _amount;
        emit KarmaAwarded(msg.sender, _user, _amount);
    }

    // View user's karma
    function getKarma(address _user) public view returns (uint256) {
        return karmaBalance[_user];
    }
}
